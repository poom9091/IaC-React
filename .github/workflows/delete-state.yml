name: 'Destroy-Terraform-gitops'

env:
  AWS_ACCESS_KEY: ${{ secrets.AWS_ACCESS_KEY }}
  AWS_SECRET_KEY: ${{ secrets.AWS_SECRET_KEY}}
  TF_VAR_AWS_REGION: ap-southeast-1
  
on:
  delete:
    branches:
      - develop
      - uat
      - main
      - master

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    environment: develop

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v2
     
    - name: Set output Branch name
      id: vars
      shell: bash
      run: |
        echo "::set-output name=branch::${GITHUB_REF#refs/heads/}"
    
    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_wrapper: false

    - name: Setup Terraform remote
      working-directory: ./remote-state
      if: | 
        contains(github.ref,'develop') || 
        contains(github.ref,'uat')      
      env:
        TF_VAR_GIT_REPO_NAME: ${{ github.event.repository.name }}
        TF_VAR_GIT_BRANCH: ${{ steps.vars.outputs.branch }} 
        GIT_BRANCH: ${{ steps.vars.outputs.branch }}
      run: |
        terraform init
        terraform validate
        terraform apply -input=false -auto-approve -var-file='../settingaws.tfvars' || true
        chmod +x "../script/setbackend.sh"
        ../script/setbackend.sh ${env.GIT_BRANCH}
        rm -rf *.tfstate
     
    - name:  Prod Setup Terraform remote 
      working-directory: ./remote-state
      if: | 
        contains(github.ref,'main') ||
        contains(github.ref,'master')
      env:
        TF_VAR_GIT_REPO_NAME: ${{ github.event.repository.name }}
        TF_VAR_GIT_BRANCH: prod 
        GIT_BRANCH: prod
      run: |
        terraform init
        terraform validate
        terraform apply -input=false -auto-approve -var-file='../settingaws.tfvars' || true
        chmod +x "../script/setbackend.sh"
        ../script/setbackend.sh ${env.GIT_BRANCH}
        rm -rf *.tfstate

    - name: Setup Terraform remote
      working-directory: ./remote-state
      env:
        TF_VAR_GIT_REPO_NAME: ${{ github.event.repository.name }}
        TF_VAR_GIT_BRANCH: ${{ steps.vars.outputs.branch }}-pipeline
      run: |
        terraform init
        terraform validate
        terraform apply -input=false -auto-approve -var-file='../settingaws.tfvars' || true
        chmod +x "../script/setbackend.sh"
        ../script/setbackend.sh pipeline
        rm -rf *.tfstate 

    - name: Terraform Destroy
      if: |
        (contains(github.ref,'develop') || 
        contains(github.ref,'uat') ) 
      working-directory: ./environment/${{ steps.vars.outputs.branch }}
      run: |
        terraform init
        terraform destroy -auto-approve

    - name: Prod Terraform Destroy
      if: |
        ( contains(github.ref,'main') ||
        contains(github.ref,'master') )
      working-directory: ./environment/prod
      run: |
        terraform init
        terraform destroy -auto-approve
    
    - name: Delete AWS pipeline
      working-directory: ./global/AWS-pipeline
      env:
        TF_VAR_ENV_NAME: ${{ steps.vars.outputs.branch }}
        TF_VAR_BRANCH_NAME: ${{ steps.vars.outputs.branch }}
        TF_VAR_PROJECT_IAC_NAME: ${{ github.event.repository.name }}
        TF_VAR_REPO_IAC_ID: ${{ github.repository }}
      run: |
        terraform init
        terraform destroy -auto-approve

      
